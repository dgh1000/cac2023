Process
- WHERE LEFT OFF: see XmlToScore_grace.hs top of file for general list of functions
  we need to work on. left off specifically on splitOutVoices

Plan: create grace notes by modifying Score.
- 
WHAT IT DOES NOW TO CREATE A Score
- create XScore via parseXScore called in RunOnce.hs
- create Score by calliing XmlToScore.hs::xmlToScore on XScore
- some parts of creating Score
  - create Score.scMarks as combination of word marks and
    met and symbol marks
  - create Score.marksByStaff
  - create Score.scStaves by
    - call Process.hs:computeXmlStaves on xscore input parameter
    - computeXmlStaves :: XScore -> ( Map Int IXMsrInfo
      , Map String (Map Loc [XMsrData]) )
    - call XmlToScore::computeStaff on each Map Loc [XMsrData]
      to create Map String Staff
    - computeStaff:: Map Int IXMsrInfo -> Map Int TimeSig 
      -> String -> Map Loc [XMsrData] -> Staff
- QUESTION: HOW DOES IT DETERMINE VOICE NUMBER in XmlToScore.hs:computeStaff?
  - some methods in XmlToScore.hs are 
    - computeChords, computeChordEndsMap, prelimChord2Chord
    - what is a "Prelim Chord"?
      - prelimChord2Chord :: Map Loc [MarkD] -> Map Loc (Map Int PrelimChord) ->
                             Map Loc (Map Int Chord)
      - has an endLoc, modifiers, and [Note]
      - how contrasts with Chord: Chord has Notes instead of [Note]
      - what is Notes?
        - Notes: NSingles (Map Int Note) or NTrill
          - what is the Int? I see the following code in XmlToScore.hs::pc2c_main_case
          - pc2c_main_case :: PrelimChord -> Chord
            - map (nmp &&& id) [Note]
          - this suggests the Int is midi pitch. weird wouldn't this be available in Note?
  - computeChords :: Map Int IXMsrInfo -> Map Loc [XMsrData] -> Map Loc (Map Int PrelimChord)
    is what computes the voice number
    - it just assumes that voice number of XNote will always be Just <vn>



---- XmlToScore.hs::computeChords ----
- lMapMaybe xMsrDataToNote
  - xMsrDataToNote :: XMsrData -> Maybe XNote
- M.map groupNotesByVoice
- M.mapWithKey (noteMapToChordMap msrInfo)


    
WHAT WE'RE GOING TO DO TO COMPUTE INITIAL SCORE (BEFORE WE
INCORPORATE GRACE NOTES)
- change Score.XmlToScore.hs::computeStaff
  - compute new variable stGrace :: Map Loc (Map Int GraceNoteSeq)
    - need to remove grace notes from Map Loc [XMsrData] and produce
      another Map Loc [XMsrData] with them, as well as store
      grace notes in a Map Loc [XNote]
    - splitGrace: Map Loc [XMsrData] -> (Map Loc [XMsrData],Map Loc [XMsrData])
      - we need to explode into [(Loc,XNote)] then filter 
        this list into two. Create a filter function that accepts
        only grace notes
      - DONE
- we need Map Loc [XMsrData] ->  Map Loc (Map Int GraceNoteSeq)
  - call this computeGraceNoteVoices:
    - explode into [(Loc,XMsrData)]
    - map with voice number into [(Loc,(Int,XMsrData))]
    - condense into Map Loc (Map Int [XMsrData])
    - now use toGraceNoteSeq
- toGraceNote :: XMsrData -> GraceNote
- toGraceNoteSeq :: [GraceNote] -> GraceNoteSeq
  - Then take type of first one, and create GraceNoteSeq 

PRELIMINARY WORK

- examing the XML generated by MuseScore and Sibelius with grace notes
- put code in ShowXmlDoc.hs
- I think:
  - putStrLn . showiToString . showI $ score

INCORPORATING GRACE NOTES

- grace notes have to be incorporated into the Chord at that Loc in
  order to be assigned a time and duration later

- how do we do ties now?

  - data
      data PrelimChord = PrelimChord
      { prcEndLoc     :: Loc
      , prcModifiers  :: Set ChordModifier
      , prcNotes      :: [Note]
      }
  - 

CONSIDERING OTHER METHODS OF DOING TIES

- tied grace notes: grace note needs a true end
  - will grace notes work with current system? problem
    is that grace notes have different end than normal notes 
    at the same beginning. same notes, same voice, but different
    ends.

- propose: work with it still in stage Map Loc [XMsrData]: except
    we use Loc for ending 
  - advantage: XMsrData has "tie start" and "tie stop" flags, can remove
    everything that is a tie stop
  - work backwards, convolving with 

- we could preserve 
etc. etc.


